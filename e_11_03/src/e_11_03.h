/*演習11-3
 * 時・分・秒のデータメンバで構成される時刻クラスに挿入子と抽出子を追加して作成せよ。
 * 作成日：2017年5月16日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月17日
 * 更新者：浅田　知嗣
 * 更新日：2017年5月18日
 * 更新者：浅田　知嗣
 */

#include <iostream>
#include <string>
#include <ctime>

//時刻を表す時刻クラスを定義。
class Time
{
	int	h;	//時刻を定義。
	int	m;	//分を定義。
	int	s;	//秒を定義。

//コンストラクタの定義。
public:
	Time(int hour, int minute, int secon) {
		//秒にあたるseconに60以上または負の値が代入されたときに60秒未満の正の値に収めるため（60秒までなのでそれ以上は不正な値としてはじく）ための繰り返し。
		for(; secon >= 60 || secon < 0; ) {

			//正の値かつ60以上の時は60未満になるまで60を減算し続ける。
			//ここに正の値かつ60以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
		if(secon > 0) {

			secon -= 60;	//受け取ったsecon（秒）から60を引く。
			minute++;		//その分＋する。
			//負の値の時は正の値かつ60未満に収まるように60を加算し続ける。
		} else if (secon < 0) {

			secon += 60;	//受け取ったsecon（秒）に60を足す。
			minute--;		//その分ーする。
		}
	}

	s = secon;	//クラスの秒に当たる部分に代入。

	//分にあたるminuteに60以上または負の値が代入されたときに60分未満の正の値に収めるため（60分までなのでそれ以上は不正な値としてはじく）ための繰り返し。
	for(; minute >= 60 || minute < 0; ) {

		//正の値かつ60以上の時は60未満になるまで60を減算し続ける。
		//ここに正の値かつ60以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
		if(minute > 0) {

			minute -= 60;	//受け取ったminute（分）から60を引く。
			hour++;			//一回引かれるたびにその分時間を＋する。
			//負の値の時は正の値かつ60未満に収まるように60を加算し続ける。
		} else if (minute < 0) {

			minute += 60;	//受け取ったminute（分）に60を足す。
			hour--;			//一回足されるたびにその分時間をーする。
		}
	}

	m = minute;	//クラスの分に当たる部分に代入。

	//時間にあたるhourに24以上または負の値が代入されたときに24時間未満の正の値に収めるため（今回は24時間表記なのでそれ以上は不正な値としてはじく）ための繰り返し。
	for(; hour >= 24 || hour < 0;) {

		//正の値かつ24以上の時は24未満になるまで24を減算し続ける。
		//ここに正の値かつ24以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
		if(hour > 0) {

			hour -= 24;		//受け取ったhour（時刻）から24を引く。
		//負の値の時は正の値かつ24時未満に収まるように24を加算し続ける。
		} else if (hour < 0) {

			hour += 24;		//受け取ったhour（時刻）に24を足す。
		}
	}

				h = hour;	//クラスの時刻に当たる部分に代入。
	}

	//時刻を返す関数の定義。
	int Hour()
	{
		//時間を返す。
		return h;
	}

	//分を返す関数の定義。
	int Minute()
	{
		//分を返す。
		return m;
	}

	//秒を返す関数の定義。
	int Secon()
	{
		//秒を返す。
		return s;
	}

	std::string to_string() const;
};

std::ostream& operator << (std::ostream& st, const Time x);
