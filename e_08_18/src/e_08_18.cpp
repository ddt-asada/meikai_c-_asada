/*演習8-18
 * 文字列として表された整数値をint型の整数値に変換した値を返す関数。
 * 作成日：2017年5月12日
 * 作成者：浅田　知嗣
 */

#include<iostream>
//文字列処理を行うライブラリ関数を提供するヘッダ。
#include <cstring>

using namespace std;

//関数宣言。
int str2int(const char* s);

int main()
{
	const char		s[] = "136";	//intに変換したい文字列を入力。

	//変換する関数を呼び出し、変換した整数値を表示。
	cout	<<"整数値に変換しました。"	<<str2int(s)	<<'\n';

	//0を返す。
	return 0;
}

/*関数名：int str2int(const char* s)
 * 引数const char* s：変換したい文字列。
 * 返却値：文字列を整数値に変換した値。
 * 作成日：2017年5月12日
 * 作成者：浅田　知嗣
 */

int str2int(const char* s)
{
	char	s1[] = "0123456789";	//走査用の文字列。

	int		len = strlen(s);

	int		num1 = 0;				//整数値に変換したものを入力するための型。

	int		num2 = 1;				//計算用の変数。

	int		num3 = 0;				//数字が見つかったかどうかを判定するための型。

	//走査用の文字列で0～9が含まれていないか一つ一つ確認する。
	for(int i = 0; i < len; i++) {

		//走査用の文字列と対象の文字列をすべて比較する。
		for(int j = 0; j < 10; j++) {

			//もし数字文字を見つけたら
			if(s[i] == s1[j]) {

				//その文字の桁数に対応して10のi乗する。
				for(int k = len - 1; k > i; k--) {

				num2 *= 10;		//10のi乗を求める。

				}

				num1 += j * num2;	//見つけた数字と桁数に応じて10のi乗したものを合計していくことにより、整数に変換していく。

				num2 = 1;			//計算に使った値をリセットする。

				num3 = 1;			//数字が見つかったことを表す。

			}
		}

		//もしnum3が0のままループを終えたら途中で文字が見つかったと判断し、整数値ではないので0を返す。
		if(num3 == 0) {

			num1 = 0;	//0を返す。

			i = len;	//強制的にループを抜ける。

		}

		num3 = 0;		//判定をいったんリセットする。
	}

	//もとめた整数値を返す。
	return num1;
}
