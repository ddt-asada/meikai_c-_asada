/*演習7-11
 * no行5列のint型2次元配列matrixの全構成要素の値を縦横に並べて表示する関数を作成。
 * 作成日：2017年5月8日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月10日
 * 更新者：浅田　知嗣
 * 更新日：2017年5月11日
 * 更新者：浅田　知嗣
 */

#include <iostream>
//時間を参照するためのヘッダ。
#include <ctime>
//C言語標準ライブラリ関数をよびだすためのヘッダ。
#include <cstdlib>

using namespace std;

//関数の宣言。
int digits(int Num);

//関数の宣言。
void print2d(int matrix[][5], int no);

int main()
{

	const int	LINE = 3;				//配列の行数。

	int			sign;					//乱数の符号を選択するための変数。

	int			matrix[LINE][5];		//任意の整数を格納する行列。

	//乱数の種を時間に決定。
	srand(time(NULL));

	//行列の各要素に-9999～9999の乱数入力。
	//行の処理。
	for(int i = 0; i < LINE; i++) {
		//列の処理。
		for(int j = 0; j < 5; j++) {

			sign = rand() % 2;	//符号を選択するための乱数。

			//乱数によって正の乱数を生成するか正の乱数を生成するかを判定。
			if(sign == 0) {

				matrix[i][j] = rand() % 10000;	//0～9999の範囲で乱数を生成。

			//乱数が奇数の時は負の乱数を生成。
			} else {

				matrix[i][j] = -rand() % 10000;	//0～-9999の範囲で乱数を生成。

			}
		}
	}

	//行列を並べて表示する関数を呼び出す。
	print2d(matrix, LINE);

	//0をかえす。
	return 0;
}

/*関数名：int digits(int Num)
 * 配列の中身を表示した後に挿入するスペースの数を判定するために桁数を返す関数。
 * 引数int Num：桁数を判定したい値。
 * 返却値：求めた桁数。
 * 作成日：2017年5月11日
 * 作成者：浅田　知嗣
 */

int digits(int Num)
{
	int digits = 0;		//桁数を入力するための型。

	//受け取った引数が負であれば絶対値にする。
	if(Num < 0) {

		Num = -Num;	//絶対値にする。

	}

	//桁数を数えるためのfor文。
	for( ; Num > 0; digits++) {
		//Numを10で割った値を次のNumとすることにより、桁数を1ずつ減らしていく。
		//このnを10で割った値が0、すなわち桁数がなくなった時点で繰り返しを終了する。
		Num = Num / 10;

	}

	//求めた桁数を返す。
	return digits;
}

/*関数名：void print2d(int matrix[][5], int no)
 * no行5れつの2次元配列matrixの全構成要素の値を縦横に並べて表示する関数。
 * 引数matrix[][5]：並べて表示したい行列。
 * 引数no：行列の行の数。
 * 作成日：2017年5月8日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月10日
 * 更新者：浅田　知嗣
 * 更新日：2017年5月11日
 * 更新者：浅田　知嗣
 */

void print2d(int matrix[][5], int no)
{

	//行列の確認。
	cout	<<"行列matrix\n";

	//行の処理。
	for(int i = 0; i < no; i++) {
		//列の処理。
		for(int j = 0; j < 5; j++) {

			//要素の表示。
			cout		<<matrix[i][j];

			//桁数を求める関数を呼び出し、それで判定した桁数により文字の後ろに挿入するスペースの数を決定する。
			for(int k = digits(matrix[i][j]); k <= 4; k++) {

				//スペースを挿入。
				cout	<<" ";

			}

			//最後に配列の中身が正の乱数であった場合スペースを1個挿入するための分岐。
			//正の値の時は負の値よりも「-」の分一つスペースを多く挿入したいため。
			if(matrix[i][j] >= 0) {

				//スペースを挿入。
				cout	<<" ";

			}
		}

		//改行。
		cout	<<'\n';

	}
}
