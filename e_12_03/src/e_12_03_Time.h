/*演習12-3
 * 時刻クラスに各種の演算子関数を追加したものを作成せよ。
 * 作成日：2017年5月17日
 * 作成者：浅田　知嗣
 */

#include <iostream>
#include <string>
#include <ctime>

//時刻を表す時刻クラスを定義。
class Time
{
	int	h;	//時刻を定義。
	int	m;	//分を定義。
	int	s;	//秒を定義。

//コンストラクタの定義。
public:
	//デフォルトコンストラクタ。
	Time()
	{
		time_t current = time(NULL);				//現在の暦時刻。

		struct tm* timer = localtime(&current);	//要素別の時刻（地方時）

		h = timer -> tm_hour;		//現在時を取得。

		m = timer -> tm_min;	//現在分を取得。

		s = timer -> tm_sec;	//現在秒を取得。
	}

	Time(int hour, int minute = 0, int secon = 0)
	{
		//不正値をはじく関数を呼び出す。
		timeAdj(&hour, &minute, &secon);

		s =secon;
		m = minute;
		h = hour;
	}

	//時間から不正値をはじくための関数。コンストラクタの定義で使いたいため、どこでも使えるvoid型としている。
	void timeAdj(int* h2 = 0, int* m2 = 0, int* s2 = 0 )
	{
		//秒にあたるseconに60以上または負の値が代入されたときに60秒未満の正の値に収めるため（60秒までなのでそれ以上は不正な値としてはじく）ための繰り返し。
		for(; *s2 >= 60 || *s2 < 0; ) {
			//正の値かつ60以上の時は60未満になるまで60を減算し続ける。
			//ここに正の値かつ60以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
			if(*s2 > 0) {

				*s2 -= 60;	//受け取ったsecon（秒）から60を引く。
				(*m2)++;		//その分＋する。
				//負の値の時は正の値かつ60未満に収まるように60を加算し続ける。
			} else if (*s2 < 0) {

				*s2 += 60;	//受け取ったsecon（秒）に60を足す。
				(*m2)--;		//その分ーする。
			}
		}
		//分にあたるminuteに60以上または負の値が代入されたときに60分未満の正の値に収めるため（60分までなのでそれ以上は不正な値としてはじく）ための繰り返し。
		for(; *m2 >= 60 || *m2 < 0; ) {

			//正の値かつ60以上の時は60未満になるまで60を減算し続ける。
			//ここに正の値かつ60以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
			if(*m2 > 0) {

				*m2 -= 60;	//受け取ったminute（分）から60を引く。
				(*h2)++;			//一回引かれるたびにその分時間を＋する。
			//負の値の時は正の値かつ60未満に収まるように60を加算し続ける。
			} else if (*m2 < 0) {

				*m2 += 60;	//受け取ったminute（分）に60を足す。
				(*h2)--;			//一回足されるたびにその分時間をーする。
			}
		}

		//時間にあたるhourに24以上または負の値が代入されたときに24時間未満の正の値に収めるため（今回は24時間表記なのでそれ以上は不正な値としてはじく）ための繰り返し。
		for(; *h2 >= 24 || *h2 < 0;) {

			//正の値かつ24以上の時は24未満になるまで24を減算し続ける。
			//ここに正の値かつ24以下の数字が落ちてくることはないので、正の値の時ということを明確にするためあえてこの条件で分岐としている。
			if(*h2 > 0) {

				*h2 -= 24;		//受け取ったhour（時刻）から24を引く。
			//負の値の時は正の値かつ24時未満に収まるように24を加算し続ける。
			} else if (*h2 < 0) {

				*h2 += 24;		//受け取ったhour（時刻）に24を足す。
			}
		}
	}

	//時刻を返す関数の定義。
	int Hour()
	{
		//時間を返す。
		return h;
	}

	//分を返す関数の定義。
	int Minute()
	{
		//分を返す。
		return m;
	}

	//秒を返す関数の定義。
	int Secon()
	{
		//秒を返す。
		return s;
	}

	//複合代入演算子+=を定義。
	Time& operator+=(const Time& x)
	{
		h += x.h;
		m += x.m;
		s += x.s;
		timeAdj(&h, &m, &s);
		return *this;
	}

	//複合代入演算子-=を定義。
	Time& operator-=(const Time& x)
		{
		h -= x.h;
		m -= x.m;
		s -= x.s;
		timeAdj(&h, &m, &s);
		return *this;
		}

	//等価演算子==を定義。
	friend bool operator==(const Time& x, const Time& y)
	{
		return x.h == y.h && x.m == y.m && x.s == y.s;
	}
	std::string to_string() const;
};

std::ostream& operator << (std::ostream& st, const Time x);
