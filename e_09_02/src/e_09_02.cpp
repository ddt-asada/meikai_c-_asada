/*演習9-2
 * 二つの整数値の最大公約数をユークリッドの互除法を用いて求める関数。
 * 作成日：2017年5月12日
 * 作成者：浅田　知嗣
 */

#include <iostream>

using namespace std;

//関数宣言。
int gcd(int div1, int div2);

int main()
{
	int	div1, div2;		//最大公約数を求めたい整数値の型。

	//最大公約数をもとめたい整数値の入力を促す。
	cout	<<"整数値div1：";
	//入力。
	cin		>>div1;


	//最大公約数を求めたい整数値の入力を促す。
	cout	<<"整数値div2：";
	//入力。
	cin		>>div2;

	//最大公約数を求める関数を呼び出し、求めた値を表示。
	cout	<<"二つの値の最大公約数は"	<<gcd(div1, div2)	<<"です。\n";

	//0を返す。
	return 0;

}

/*関数名：int gcd(int div1, int div2)
 * ユークリッドの互除法を用いて二つの値の最大公約数を求める関数。
 * 引数int div1：最大公約数を求める値。
 * 引数int div2：最大公約数を求める値。
 * 返却値：div1とdiv2の最大公約数。
 * 作成日：2017年5月12日
 * 作成者：浅田　知嗣
 */

int gcd(int div1,int div2)
{
	//割り算した時の剰余に応じて分岐。余りが出なくなった値が最大公約数であるとして値を返す。
	if(div1 % div2 != 0) {

		gcd(div2, div1 % div2);		//剰余と小さい方の値を用いて再起呼び出し。

	//それ以外の時。
	} else {

		//もとめた最大公約数を返す。
		//ここでreturnを使って抜けなければ再起呼び出しされ場所にもとめた値がどんどん戻っていき、最初の値に戻ることになる。
		return div2;

	}
}
