/*演習6-11
 * 4種類の問題をランダムに出題する暗算トレーニングプログラム。
 * 作成日：2017年5月3日
 * 作成者：浅田　知嗣
 */

#include <iostream>
//時間を参照するためのヘッダ。
#include <ctime>
//C言語の関数ライブラリを利用するためのヘッダ。
#include <cstdlib>

using namespace std;

/*関数名：bool confirm_retry();
 * キーボードから1または0を読み込み（1または0以外が入力された場合は再入力させる）返却する関数。
 * 返却値retry;キーボードから入力された1または0を返却する。
 */

int confirm_retry()
{
	//キーボードから値を読み込むための型。
	int retry = 100;

	//0か1が入力されるまで再入力させる繰り返し。
	for( ; retry != 1 && retry != 0; ) {
		//キーボードから数値の入力を促す。
		cout << "もう一度？＜Yes…1／No…0＞：";
		cin >> retry;
	}

	//キーボードから読み込んだ値を返却する。
	return retry;
}

int main()
{
	//乱数の種を時間により決定する。
	srand(time(NULL));

	//問題の答えを入力させる型。
	int nA;

	//暗算トレーニングの開始を明示する。
	cout << "暗算トレーニング開始！！\n";

	//ユーザーが終了を選択するまで繰り返す。
	for( ; confirm_retry() != 0; ) {

		//問題に使用する3桁の乱数を三つ生成する。
		int x = rand() % 900 + 100;
		int y = rand() % 900 + 100;
		int z = rand() % 900 + 100;

		//問題を決定するための4種類の乱数を生成する。
		int nQ = rand() % 4;

		//問題の種類によって分岐。
		if(nQ == 0) {

			//問題が不正解な限り繰り返し。
			for( ; nA != x + y + z; ){

				//問題を掲示。
				cout << x << " + " << y << " + " << z << " = ";
				cin >> nA;

				//正解の時。
				if(nA == x + y + z) {
					cout << "正解です。\n";

				//それ以外の時。
				} else {
					cout << "不正解です。\n";
				}
			}
		} else if (nQ == 1) {
			//問題が不正解な限り繰り返し。
			for( ; nA != x + y - z; ){

				//問題を掲示。
				cout << x << " + " << y << " - " << z << " = ";
				cin >> nA;

				//正解の時。
				if(nA == x + y - z) {
					cout << "正解です。\n";

					//それ以外の時。
				} else {
					cout << "不正解です。\n";
				}
			}
		} else if (nQ == 2) {
			//問題が不正解な限り繰り返し。
			for( ; nA != x - y + z; ){

				//問題を掲示。
				cout << x << " - " << y << " + " << z << " = ";
				cin >> nA;

				//正解の時。
				if(nA == x - y + z) {
					cout << "正解です。\n";

					//それ以外の時。
				} else {
					cout << "不正解です。\n";
				}
			}
		} else if (nQ == 3) {
			//問題が不正解な限り繰り返し。
			for( ; nA != x - y - z; ){

				//問題を掲示。
				cout << x << " - " << y << " - " << z << " = ";
				cin >> nA;

				//正解の時。
				if(nA == x - y - z) {
					cout << "正解です。\n";

					//それ以外の時。
				} else {
					cout << "不正解です。\n";
				}
			}
		}
	}
}
