/*演習8-12
 * 文字列に含まれる最も先頭に位置する文字cの展示を返す関数を作成。文字cが含まれない場合は-1を返却。
 * 作成日：2017年5月11日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月12日
 * 更新者：浅田　知嗣
 * 更新日：2017年5月15日
 * 更新者：浅田　知嗣
 */

#include <iostream>
//文字列処理関数を提供するヘッダ。
#include <cstring>

using namespace std;

//関数宣言。
int strchr_idx(const char* s, char c);

int main()
{
	int			judge = 0;		//判定を入力する型。

	const char	s[] = "ABSZXYX";//走査したい文字列。

	char		c = 'A';		//探す文字。

	judge = strchr_idx(s, c);	//文字列を走査する関数を呼び出し、判定を代入。

	//目的の文字列が見つかったとき。
	if(judge != -1) {

		//走査した結果を表示。
		cout	<<"文字"	<<c	<<"は文字列"	<<s	<<"の"	<<judge	<<"番目にありました。\n";

	//見つからなかったとき。
	} else {

		//見つからなかったと表示。
		cout	<<"見つかりませんでした。\n";
	}

	//0を返す。
	return 0;
}

/*関数名：int strchr_idx(const char* s, char c)
 * 引数cnost char*s：走査したい文字列。
 * 引数char c：探す文字。
 * 返却値：格納されている添字、見つからなかった場合は-1をかえす。
 * 作成日：2017年5月11日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月12日
 * 更新者：浅田　知嗣
 * 更新日：2017年5月15日
 * 更新者：浅田　知嗣
 */

int strchr_idx(const char* s, char c)
{
	int place = -1;					//目的の文字の添字を入力する型。

	int len = strlen(s);			//繰り返しの判定で使う文字列の長さを求める。

	//文字列の全要素を走査する。途中で目的の文字を見つけた場合はそこでループ終了。
	for(int i = 0; i < len; i++) {

		//目的の文字が見つかったとき。
		if(s[i] == c) {

			place = i;	//見つけた場所を代入。

			i = len;	//見つけたときにiにlenを代入することにより繰り返し条件を満たさないようにし、ループから脱出させる。

		//見つからないとき。
		}
	}

	//見つけた場所を返す。
	return place;
}
