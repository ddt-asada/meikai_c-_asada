/*演習6-19
 * List6-21の関数rを、不正な添字に対して安全に動作するものに書き換えよ。
 * 静的記憶域期間をもつint型の変数を関数内部で定義して、idが0以上a\size未満でなければ、その変数への参照を返却すること。
 * 作成日：2017年5月8日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月10日
 * 更新者：浅田　知嗣
 */

#include <iostream>

using namespace std;

const int	a_size = 5;		//配列の要素数。

//関数宣言。
int& r(int idx);

int main()
{
	//すべての配列を参照を返却する関数へ渡す。
	for( int i = 0; i < a_size; i++) {

		r(i) = i;	//関数を呼び出すことにより参照された配列にiを代入。

	}

	//すべての参照された配列の中身を確認するための繰り返し。
	//配列の範囲を超えたときにどのような動作をするか確認するため、配列の要素数＋5の繰り返しとしている。
	for(int i = -10; i < a_size + 5; i++) {

		//配列を表示。
		cout	<<"r("	<<i	<<") = "	<<r(i)	<<'\n';

	}

	//0を返す。
	return 0;
}

/*関数名int& r(int idx)
 * 渡された引数を添字とした配列の要素への参照を返却する関数。
 * 引数idx：配列の添字。
 * 返却値：配列の要素への参照。
 * 作成日：2017年5月8日
 * 作成者：浅田　知嗣
 * 更新日：2017年5月10日
 * 更新者：浅田　知嗣
 */
int& r(int idx)
{
	static int a[a_size];	//静的記憶域期間を持つ要素数a_sizeの配列。

	static int Num = 10;	//指定された範囲以外の時に返すための変数。

	//渡された引数が0以上a_size未満の時。
	if(0 <= idx && a_size > idx) {

		//a[idx]への参照を返却。
		return a[idx];

	}

	//一定の変数への参照を返す。
	return Num;

}
